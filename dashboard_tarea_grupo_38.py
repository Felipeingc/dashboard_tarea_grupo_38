# -*- coding: utf-8 -*-
"""dashboard_tarea_grupo_38

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qFzV5SBBWEeJhL-eXZS7Dsns-3A18T6E
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

st.title("dashboard_tarea_grupo_38")

# Cargar archivo de ejemplo por defecto
DATA_PATH = "data.csv"

# Subida de archivo CSV
uploaded_file = st.file_uploader("Sube tu propio archivo CSV (opcional)", type=["csv"])

if uploaded_file is not None:
    df_data = pd.read_csv(uploaded_file)
else:
    # Si no se sube archivo, usa el de ejemplo
    if os.path.exists(DATA_PATH):
        df_data = pd.read_csv(DATA_PATH)
        st.info("Mostrando datos de ejemplo incluidos en la app.")
    else:
        st.error("No se encontró el archivo de ejemplo.")
        st.stop()

# Mostrar los primeros registros
st.write("Datos cargados:", df_data.head())

# Gráficos y chequeos (idéntico a tu código original)
if 'Date' in df_data.columns and 'Quantity' in df_data.columns:
    df_data['Date'] = pd.to_datetime(df_data['Date'])
    df_grouped = df_data.groupby('Date')['Quantity'].sum().reset_index()
    fig, ax = plt.subplots(figsize=(10,6))
    ax.plot(df_grouped['Date'], df_grouped['Quantity'], color='blue')
    ax.set_title('Fecha vs. Cantidad')
    ax.set_xlabel('Fecha')
    ax.set_ylabel('Cantidad de ventas')
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)
else:
    st.error("El archivo debe contener las columnas 'Date' y 'Quantity'.")

if 'Customer type' in df_data.columns and 'Total' in df_data.columns:
    grouped = df_data.groupby('Customer type')['Total'].sum()
    total_gasto = grouped.sum()
    percentages = (grouped / total_gasto) * 100
    fig, ax = plt.subplots()
    percentages.plot(kind='bar', color=['skyblue', 'orange'], ax=ax)
    ax.set_ylabel('Porcentaje del Gasto Total (%)')
    ax.set_title('Comparación del Gasto Total entre Clientes \"Member\" y \"Normal\"')
    ax.set_xticklabels(['Member', 'Normal'], rotation=0)
    for i, v in enumerate(percentages):
        ax.text(i, v + 1, f"{v:.1f}%", ha='center', va='bottom')
    plt.tight_layout()
    st.pyplot(fig)
else:
    st.error("El archivo debe contener las columnas 'Customer type' y 'Total'.")

if 'Payment' in df_data.columns:
    payment_counts = df_data['Payment'].value_counts()
    payment_percentages = payment_counts / payment_counts.sum() * 100
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.pie(payment_counts, labels=payment_counts.index, autopct='%1.1f%%', startangle=140)
    ax.set_title('Métodos de Pago más Frecuentes')
    st.pyplot(fig)
else:
    st.error("El archivo debe contener la columna 'Payment'.")